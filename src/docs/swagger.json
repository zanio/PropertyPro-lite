{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "PropertyPro-lite",
    "description": "Auto Mart is an online marketplace for automobiles of diverse makes, model or body type. With Auto Mart, users can sell their cars or buy from trusted dealerships or private sellers.",
    "license": {
      "name": "ISC"
    }
  },
  "host": "frozen-depths-93495.herokuapp.com",
  "basePath": "/api/v1",
  "schemes": [
    "https"
  ],
  "paths": {
    "/auth/signup": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Creates user",
        "description": "Adds a new user and saves the user in memory",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "The user to create",
            "schema": {
              "required": [
                "email",
                "firstName",
                "lastName",
                "gender",
                "password",
                "address",
                "isAdmin"
              ],
              "properties": {
                "email": {
                  "type": "string",
                  "example": "johndoe@gmail.com"
                },
                "firstName": {
                  "type": "string",
                  "example": "John"
                },
                "lastName": {
                  "type": "string",
                  "example": "Doe"
                },
                "gender": {
                  "type": "string",
                  "example": "MALE",
                  "enum": [
                    "MALE",
                    "FEMALE"
                  ]
                },
                "password": {
                  "maxLength": 15,
                  "minLength": 8,
                  "type": "string",
                  "example": "rted34w23wg"
                },
                "address": {
                  "type": "string",
                  "example": "123 Some Street. Agege Lagos, Nigeria"
                },
                "isAdmin": {
                  "type": "boolean"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User was created successfully",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "400": {
            "description": "One or more fields is/are missing",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "A server error prevented the user from being created",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/auth/signin": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Login a user",
        "description": "Validates a user against users saved in memory. Genearates a new token for user if validation is successful",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "The user to signin",
            "schema": {
              "required": [
                "email",
                "password"
              ],
              "properties": {
                "email": {
                  "type": "string",
                  "example": "johndoe@gmail.com"
                },
                "password": {
                  "maxLength": 15,
                  "minLength": 8,
                  "type": "string",
                  "example": "g54gfs5680nj"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User was signed in successfully",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "400": {
            "description": "One or more fields is/are missing",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "422": {
            "description": "The email is not associated with any user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "A server error prevented the user from being created/signed in",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/cars": {
      "post": {
        "tags": [
          "Cars"
        ],
        "summary": "Creates car AD",
        "description": "Creates a new car AD and saves it in memory",
        "security": [
          {
            "Token": []
          }
        ],
        "parameters": [
          {
            "name": "car",
            "in": "body",
            "description": "The body of the car AD to create",
            "schema": {
              "required": [
                "owner",
                "state",
                "price",
                "manufacturer",
                "model",
                "bodyType"
              ],
              "properties": {
                "owner": {
                  "type": "integer",
                  "example": 1
                },
                "state": {
                  "type": "string",
                  "example": "used",
                  "enum": [
                    "new",
                    "used"
                  ]
                },
                "price": {
                  "type": "integer",
                  "format": "double",
                  "example": 1000000.34
                },
                "manufacturer": {
                  "type": "string",
                  "example": "Ford"
                },
                "model": {
                  "type": "string",
                  "example": "F50"
                },
                "bodyType": {
                  "type": "string",
                  "example": "truck"
                },
                "image": {
                  "type": "string",
                  "example": "./upload/usedtoyota.png"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Car AD was created successfully",
            "schema": {
              "$ref": "#/definitions/CarResponse"
            }
          },
          "400": {
            "description": "One or more fields is/are missing",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "User with id: 1 does not exist",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "A server error prevented the car AD from being created",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/cars/{carId}/price": {
      "patch": {
        "tags": [
          "Cars"
        ],
        "summary": "Updates car",
        "description": "Updates the price of a posted AD",
        "security": [
          {
            "Token": []
          }
        ],
        "parameters": [
          {
            "name": "carId",
            "in": "path",
            "required": true,
            "description": "The car's id",
            "type": "integer"
          },
          {
            "price": null,
            "in": "body",
            "name": "price",
            "schema": {
              "properties": {
                "price": {
                  "type": "integer",
                  "format": "double",
                  "example": 1500000.24
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Car AD was updated successfully",
            "schema": {
              "$ref": "#/definitions/CarResponse"
            }
          },
          "400": {
            "description": "One or more fields is/are missing",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Car with id: 1 does not exist",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "A server error prevented the car AD from being created",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/cars/{carId}/status": {
      "patch": {
        "tags": [
          "Cars"
        ],
        "summary": "Updates car",
        "description": "Updates the status of a posted car AD",
        "security": [
          {
            "Token": []
          }
        ],
        "parameters": [
          {
            "name": "carId",
            "in": "path",
            "required": true,
            "description": "The car's id",
            "type": "integer"
          },
          {
            "price": null,
            "in": "body",
            "name": "status",
            "schema": {
              "properties": {
                "status": {
                  "type": "string",
                  "example": "sold"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Car AD was updated successfully",
            "schema": {
              "$ref": "#/definitions/CarResponse"
            }
          },
          "400": {
            "description": "One or more fields is/are missing",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Car with id: 1 does not exist",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "A server error prevented the car AD from being created",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/cars/{carId}": {
      "get": {
        "tags": [
          "Cars"
        ],
        "summary": "Gets a car",
        "description": "Gets a specific car by its id",
        "security": [
          {
            "Token": []
          }
        ],
        "parameters": [
          {
            "name": "carId",
            "in": "path",
            "required": true,
            "description": "The id of the car to get",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Car was retrieved successfully",
            "schema": {
              "$ref": "#/definitions/CarResponse"
            }
          },
          "404": {
            "description": "Car with id: 1 does not exist",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "A server error prevented the car from being retrieved",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/cars": {
      "get": {
        "tags": [
          "Cars"
        ],
        "summary": "Gets all unsold cars",
        "description": "Returns a list of all available cars. Returns a list of cars within a price range if minPrice and maxPrice query parameters are added.",
        "security": [
          {
            "Token": []
          }
        ],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "required": true,
            "description": "The status of the cars to fetch",
            "type": "string"
          },
          {
            "name": "minPrice",
            "in": "query",
            "description": "The minimum price",
            "type": "integer"
          },
          {
            "name": "maxPrice",
            "in": "query",
            "description": "The maximum price",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Cars were retrieved successfully",
            "schema": {
              "$ref": "#/definitions/CarsResponse"
            }
          },
          "500": {
            "description": "A server error prevented the cars from being retrieved",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/admin/cars/{carId}": {
      "delete": {
        "tags": [
          "Cars"
        ],
        "summary": "Deletes a car",
        "description": "Deletes a specific car from the memory",
        "security": [
          {
            "Token": []
          }
        ],
        "parameters": [
          {
            "name": "carId",
            "in": "path",
            "required": true,
            "description": "The id of the car to delete",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Car was successfully deleted",
            "schema": {
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "string",
                  "example": "Car was deleted successfully"
                }
              }
            }
          },
          "500": {
            "description": "A server error prevented the car from being deleted",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/admin/cars": {
      "get": {
        "tags": [
          "Cars"
        ],
        "summary": "Gets all cars",
        "description": "Returns a list of all cars irrespective of status",
        "security": [
          {
            "Token": []
          }
        ],
        "responses": {
          "200": {
            "description": "Cars were retrieved successfully",
            "schema": {
              "$ref": "#/definitions/CarsResponse"
            }
          },
          "500": {
            "description": "A server error prevented the cars from being retrieved",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/orders": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Create a purchase order",
        "description": "Creates a purchase order and saves it in memory",
        "security": [
          {
            "Token": []
          }
        ],
        "parameters": [
          {
            "name": "order",
            "in": "body",
            "description": "The body of the order to create",
            "schema": {
              "required": [
                "buyer",
                "carId",
                "amount"
              ],
              "properties": {
                "buyer": {
                  "type": "integer",
                  "example": 1
                },
                "carId": {
                  "type": "integer",
                  "example": 1
                },
                "amount": {
                  "type": "integer",
                  "format": "double",
                  "example": 1000000.34
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Purchase order was created successfully",
            "schema": {
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "example": 1
                    },
                    "carId": {
                      "type": "integer",
                      "example": 1
                    },
                    "createdOn": {
                      "type": "string",
                      "format": "date-time",
                      "example": "10/06/2019 8:30am"
                    },
                    "status": {
                      "type": "string",
                      "example": "pending"
                    },
                    "price": {
                      "type": "integer",
                      "format": "double",
                      "example": 1500000.34
                    },
                    "priceOffered": {
                      "type": "integer",
                      "format": "double",
                      "example": 1000000.29
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "One or more fields is/are missing",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Buyer with id: 1 does not exist",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "A server error prevented the car AD from being created",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/orders/{orderId}/price": {
      "patch": {
        "tags": [
          "Orders"
        ],
        "summary": "Updates a purchase order",
        "description": "Update the price of a purchase order. A user can only update the price of his/her purchase order while the order’s status still reads pending",
        "security": [
          {
            "Token": []
          }
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "description": "The order's id",
            "type": "integer"
          },
          {
            "price": null,
            "in": "body",
            "name": "price",
            "schema": {
              "properties": {
                "price": {
                  "type": "number",
                  "format":"double",
                  "example": 1405000.87
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Purchase order was updated successfully",
            "schema": {
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "example": 1
                    },
                    "carId": {
                      "type": "integer",
                      "example": 1
                    },
                    "createdOn": {
                      "type": "string",
                      "format": "date-time",
                      "example": "10/06/2019 8:30am"
                    },
                    "updatedOn": {
                      "type": "string",
                      "format": "date-time",
                      "example": "10/06/2019 8:30am"
                    },
                    "status": {
                      "type": "string",
                      "example": "pending"
                    },
                    "price": {
                      "type": "integer",
                      "format": "double",
                      "example": 1500000.34
                    },
                    "oldPriceOffered": {
                      "type": "integer",
                      "format": "double",
                      "example": 1000000.29
                    },
                    "newPriceOffered": {
                      "type": "integer",
                      "format": "double",
                      "example": 2000000.54
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "One or more fields is/are missing",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Car with id: 1 does not exist",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "A server error prevented the car AD from being created",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "Token": {
      "description": "Standard Authorization header using the Bearer scheme. Example: \"Bearer {token}\"",
      "type": "apiKey",
      "in": "header",
      "name": "Authorization"
    }
  },
  "definitions": {
    "ErrorResponse": {
      "properties": {
        "status": {
          "type": "integer",
          "example": 400
        },
        "message": {
          "type": "string",
          "example": "There was an error in processing your request"
        }
      }
    },
    "UserResponse": {
      "properties": {
        "status": {
          "type": "integer",
          "example": 200
        },
        "data": {
          "type": "object",
          "properties": {
            "token": {
              "type": "string",
              "example": "retfdtblhgt67n89ujn jbj"
            },
            "id": {
              "type": "integer",
              "example": 1
            },
            "email": {
              "type": "string",
              "example": "johndoe@gmail.com"
            },
            "firstName": {
              "type": "string",
              "example": "John"
            },
            "lastName": {
              "type": "string",
              "example": "Doe"
            },
            "gender": {
              "type": "string",
              "example": "FEMALE",
              "enum": [
                "MALE",
                "FEMALE"
              ]
            },
            "address": {
              "type": "string",
              "example": "10, my street, Lagos State, Nigeria"
            },
            "isAdmin": {
              "type": "boolean"
            },
            "registeredOn": {
              "type": "string",
              "example": "10/6/2019 8:30am",
              "format": "date-time"
            }
          }
        }
      }
    },
    "CarResponse": {
      "properties": {
        "status": {
          "type": "integer",
          "example": 200
        },
        "data": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "example": 1
            },
            "email": {
              "type": "string",
              "example": "johndoe@gmail.com"
            },
            "createdOn": {
              "type": "string",
              "example": "10/6/2019 8:30am",
              "format": "date-time"
            },
            "manufacturer": {
              "type": "string",
              "example": "Ford"
            },
            "model": {
              "type": "string",
              "example": "F50"
            },
            "price": {
              "type": "integer",
              "example": 1000000.34,
              "format": "double"
            },
            "state": {
              "type": "string",
              "example": "new",
              "enum": [
                "new",
                "used"
              ]
            },
            "status": {
              "type": "string",
              "example": "available",
              "enum": [
                "available",
                "sold"
              ]
            },
            "bodyType": {
              "type": "string",
              "example": "truck"
            },
            "imageUrl": {
              "type": "string",
              "example": "www.yourcarimage@cloudinary.com"
            }
          }
        }
      }
    },
    "CarsResponse": {
      "properties": {
        "status": {
          "type": "integer",
          "example": 200
        },
        "data": {
          "type": "array",
          "items": {
            "properties": {
              "id": {
                "type": "integer",
                "example": 1
              },
              "email": {
                "type": "string",
                "example": "johndoe@gmail.com"
              },
              "createdOn": {
                "type": "string",
                "example": "10/6/2019 8:30am",
                "format": "date-time"
              },
              "manufacturer": {
                "type": "string",
                "example": "Ford"
              },
              "model": {
                "type": "string",
                "example": "F50"
              },
              "price": {
                "type": "integer",
                "example": 1000000.34,
                "format": "double"
              },
              "state": {
                "type": "string",
                "example": "new",
                "enum": [
                  "new",
                  "used"
                ]
              },
              "status": {
                "type": "string",
                "example": "available",
                "enum": [
                  "available",
                  "sold"
                ]
              },
              "bodyType": {
                "type": "string",
                "example": "truck"
              },
              "imageUrl": {
                "type": "string",
                "example": "www.yourcarimage@cloudinary.com"
              }
            }
          }
        }
      }
    }
  }
}